cmake_minimum_required(VERSION 3.15)

project(bench_exceptions CXX)

set(CALL_STACK_SIZE "10" CACHE STRING "")


find_package(Python3 REQUIRED)
set(GENERATE_PY "${CMAKE_CURRENT_SOURCE_DIR}/generate.py")

find_package(benchmark REQUIRED)

list(APPEND TEMPLATES
    ${CMAKE_CURRENT_SOURCE_DIR}/templates/functions.h.j2
    ${CMAKE_CURRENT_SOURCE_DIR}/templates/impl.cpp.j2)
list(APPEND AUTOGENERATED_HEADERS "${CMAKE_CURRENT_BINARY_DIR}/autogen/functions.h")
math(EXPR IMPL_RANGE "${CALL_STACK_SIZE} - 1")
foreach(IMPLN RANGE ${IMPL_RANGE})
    list(APPEND AUTOGENERATED_SOURCES "${CMAKE_CURRENT_BINARY_DIR}/autogen/impl${IMPLN}.cpp")
endforeach()
list(APPEND AUTOGENERATED_FILES "${AUTOGENERATED_HEADERS}")
list(APPEND AUTOGENERATED_FILES "${AUTOGENERATED_SOURCES}")
add_custom_command(
    OUTPUT ${AUTOGENERATED_FILES}
    COMMAND Python3::Interpreter "${GENERATE_PY}" "${CALL_STACK_SIZE}" "${CMAKE_CURRENT_BINARY_DIR}/autogen"
    DEPENDS "${GENERATE_PY}" "${TEMPLATES}"
    VERBATIM
)
add_custom_target(autogenerate_headers DEPENDS ${AUTOGENERATED_HEADERS})

add_executable(
    bench
    main.cpp
    random.cpp
    "${AUTOGENERATED_SOURCES}"
)
target_include_directories(bench PUBLIC ${CMAKE_CURRENT_SOURCE_DIR})
target_include_directories(bench PUBLIC ${CMAKE_CURRENT_BINARY_DIR})
add_dependencies(bench autogenerate_headers)

target_link_libraries(bench benchmark)
